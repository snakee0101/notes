- OK - Link is a separate entity, so it requires a separate model, factory, migration
- OK - Link requires two types of tests - feature and unit
- OK - Link table structure
   $name (displayed in preview box)
   $url (exact location the link points to)
   $favicon_url (path to icon, that this link is identified by)
   $domain (site domain, displayed in preview box)
   $note_id (each link belongs to a note - it's a relationship)

- OK - Set up the relationships:
  - OK - Note hasMany Links
  - OK - Link belongsTo a Note

- OK - Set up DB CONSTRAINTS
  - OK - When the note is deleted - all associated links are automatically removed (ON DELETE CASCADE)
  - OK - UNIQUE check: links with the same url in the same note are not allowed
  - OK - it shouldn't raise an exception, because other links must be added despite constraint violation - the exception
         must be intercepted by try-catch and ignored)

- OK - Link actions
   - OK - Copy URL.  Performed by:  Vue
   - OK - Remove. Performed by:
     - OK - Vue
     - OK - PHP
   - OK - Restore. Performed by:
     - OK - PHP
     - OK - Vue

- OK - Link should have a resource controller with one action - DESTROY

WHEN the Note-Link relations and Link models must be checked for CHANGES:
- OK - Note is CREATED
- OK - Note is UPDATED
- OK - Note is DELETED

ACTIONS
- OK - REMOVE. The link card (actually the link model) is removed only when the user clicked "Remove" button,
- OK - when the link is deleted from the note's body, it's model remains untouched (soft deletes).
- OK - It requires a DESTROY controller action

- OK - link could be RESTORED (requires RESTORE action)
- OK - link could be restored by Vue (it means that DESTROY action could be undone with Vue Notification)

- OK - CREATE. The link model is created only after the new note is saved to DB.
- OK - CREATE (Vue). After the new note is created - the link card is automatically displayed on the note

- OK - Before creation, all links must be found. It's accomplished by parsing note's body for links.
  IMPLEMENTATION:
  Link::parseNote($note) {
     //parse note body for <a> tags  (<a href="LINK URL">LINK NAME (WAS SET IN WYSIWYG EDITOR)</a>)
     //extract urls and link names from these tags
     //return array [ ['name' => link_name, 'url' => link_url], ... ]
  }

- OK - IMPLEMENTATION of CREATE on the model:
  Link::make($url, $name) {
- OK - Separate method: (Link::extractFavicon($url))  Http::get(); //extract favicon from the request
- OK - Separate method: (Link::extractHost($url))   regex() //extract domain from link URL

     //set the link name and url from arguments
     save model($url, $name, $favicon_url, $host);
  }


- OK - IMPLEMENTATION of CREATE in controller:
  foreach Link::parseNote($note) as $link
      Link::make($link['url'], $link['name']);


- OK - SYNC. When the note is edited - the new links are added to db,
- OK - but the SOFT DELETED links are not deleted, until the user manually deletes them with the button

- OK - SYNC. However, if the old link's name is changed - it must be reflected in the table.

RELATIONS
- OK - Note::copy() action must now copy the Note->URLS relationship
