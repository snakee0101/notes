<?php

namespace Tests\Unit;

use App\Models\Note;
use App\Models\User;
use App\Utilities\Trash;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class TrashTest extends TestCase
{

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        auth()->logout();
    }

    public function test_remove_expired()
    {
        $user = User::factory()->create();
        auth()->login($user);

        Note::factory()->for($user, 'owner')->create()
                       ->delete();

        $this->travel(-8)->days();
        Note::factory()->for($user, 'owner')->create()
                        ->delete();

        $this->assertCount(2, Note::onlyTrashed()->get());

        $this->travelBack();
        Trash::removeExpired();
        $this->assertCount(1, Note::onlyTrashed()->get());
    }

    public function test_empty()
    {
        $user = User::factory()->create();
        auth()->login($user);

        Note::factory()->count(5)->for($user, 'owner')->create()->each->delete();
        $this->assertCount(5, Note::onlyTrashed()->get());

        Trash::empty();
        $this->assertEmpty( Note::onlyTrashed()->get() );
    }

    public function test_trash_is_emptied_for_specific_user()
    {
        $user_1 = User::factory()->create();
        $user_2 = User::factory()->create();

        Note::factory()->count(5)->for($user_1, 'owner')->create()->each->delete();
        Note::factory()->count(5)->for($user_2, 'owner')->create()->each->delete();

        auth()->login($user_1);
        Trash::empty();

        $this->assertCount(5, Note::onlyTrashed()->where('owner_id', $user_2->id)->get());

        auth()->logout();
        auth()->login($user_2);
        Trash::empty();

        $this->assertEmpty(Note::onlyTrashed()->get());
    }

    public function test_images_are_deleted_when_trash_is_emptied()
    {
        $storage = Storage::fake();
        $note = Note::factory()->create();
        $storage->put('images/123.jpeg', 12345);
        $storage->put('thumbnails_small/456.jpeg', 12345);
        $storage->put('thumbnails_large/789.jpeg', 12345);
        auth()->login($note->owner);

        $note->images()->create([
            'note_id' => $note->id,
            'image_path' => '/storage/images/123.jpeg',
            'thumbnail_small_path' => '/storage/thumbnails_small/456.jpeg',
            'thumbnail_large_path' => '/storage/thumbnails_large/789' .
                '.jpeg',
        ]);

        $this->assertTrue( $storage->exists('images/123.jpeg') );
        $this->assertTrue( $storage->exists('thumbnails_small/456.jpeg') );
        $this->assertTrue( $storage->exists('thumbnails_large/789.jpeg') );
        $this->assertDatabaseCount('images', 1);

        $note->delete();
        Trash::empty();

        $this->assertFalse( $storage->exists('images/123.jpeg') );
        $this->assertFalse( $storage->exists('thumbnails_small/456.jpeg') );
        $this->assertFalse( $storage->exists('thumbnails_large/789.jpeg') );
        $this->assertDatabaseCount('images', 0);
    }

    public function test_images_are_deleted_when_expired_notes_are_removed()
    {
        $storage = Storage::fake();
        $note = Note::factory()->create();
        $storage->put('images/123.jpeg', 12345);
        $storage->put('thumbnails_small/456.jpeg', 12345);
        $storage->put('thumbnails_large/789.jpeg', 12345);
        auth()->login($note->owner);

        $note->images()->create([
            'note_id' => $note->id,
            'image_path' => '/storage/images/123.jpeg',
            'thumbnail_small_path' => '/storage/thumbnails_small/456.jpeg',
            'thumbnail_large_path' => '/storage/thumbnails_large/789' .
                '.jpeg',
        ]);

        $this->assertTrue( $storage->exists('images/123.jpeg') );
        $this->assertTrue( $storage->exists('thumbnails_small/456.jpeg') );
        $this->assertTrue( $storage->exists('thumbnails_large/789.jpeg') );
        $this->assertDatabaseCount('images', 1);

        $this->travel(-8)->days();
        $note->delete();
        $this->travelBack();
        Trash::removeExpired();

        $this->assertFalse( $storage->exists('images/123.jpeg') );
        $this->assertFalse( $storage->exists('thumbnails_small/456.jpeg') );
        $this->assertFalse( $storage->exists('thumbnails_large/789.jpeg') );
        $this->assertDatabaseCount('images', 0);
    }
}
