<?php

namespace Tests\Unit;

use App\Models\Image;
use App\Models\Note;
use App\Models\User;
use App\Utilities\Trash;
use Illuminate\Support\Facades\Storage;
use Mockery\MockInterface;
use Tests\TestCase;
use thiagoalessio\TesseractOCR\TesseractOCR;

class TrashTest extends TestCase
{

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Storage::fake('public');

        $this->mock(TesseractOCR::class, function (MockInterface $mock) {
            $mock->shouldReceive('run', 'image', 'imageData');
        });
    }

    public function test_remove_expired()
    {
        auth()->login($user = User::factory()->create());

        ($will_not_be_deleted = Note::factory()->for($user, 'owner')->create())
                       ->delete();

        $this->travel(-8)->days();
        Note::factory()->for($user, 'owner')->create()
                        ->delete();

        $this->assertCount(2, Note::onlyTrashed()->get());

        $this->travelBack();
        Trash::removeExpired();

        $this->assertCount(1, Note::onlyTrashed()->get());
        $this->assertTrue( $will_not_be_deleted->is(Note::onlyTrashed()->first()) );
    }

    public function test_trash_is_emptied_for_specific_user()
    {
        $user_1 = User::factory()->create();
        $user_2 = User::factory()->create();

        Note::factory()->count(5)->for($user_1, 'owner')->create()->each->delete();
        Note::factory()->count(5)->for($user_2, 'owner')->create()->each->delete();

        auth()->login($user_1);
        Trash::empty();

        $this->assertCount(0, Note::onlyTrashed()->where('owner_id', $user_1->id)->get());
        $this->assertCount(5, Note::onlyTrashed()->where('owner_id', $user_2->id)->get());

        auth()->login($user_2);
        Trash::empty();

        $this->assertEmpty(Note::onlyTrashed()->get());
    }

    public function test_images_are_deleted_when_trash_is_emptied()
    {
        $image = Image::factory()->create();
        auth()->login($image->note->owner);

        $image->note->delete();
        Trash::empty();

        $this->assertDatabaseCount('images', 0);
    }

    public function test_images_are_deleted_when_expired_notes_are_removed()
    {
        $image = Image::factory()->create();
        auth()->login($image->note->owner);

        $this->travel(-8)->days();
        $image->note->delete();
        $this->travelBack();

        Trash::removeExpired();

        $this->assertDatabaseCount('images', 0);
    }
}
